package models

// This file was generated by the gogi.
// Editing this file might prove futile when you re-run the gogi generate command

import (
	"fmt"
	"strings"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/validate"
)

// This file was generated by the gogi tool.
// Editing this file might prove futile when you re-run the swagger generate command

// NeurocapsuleResponse neurocapsule response
// swagger:model NeurocapsuleResponse

// easyjson:json
type NeurocapsuleResponse struct {

	// neurocapsule
	// Required: true
	Neurocapsule *NeurocapsuleResponseNeurocapsule `json:"neurocapsule"`
}

// Validate validates this neurocapsule response
func (m *NeurocapsuleResponse) Validate() error {
	var res []error

	if err := m.validateNeurocapsule(); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		msgs := []string{}
		for _, err := range res {
			msgs = append(msgs, err.Error())
		}
		return fmt.Errorf("validation failure list: " + strings.Join(msgs, "; "))
	}
	return nil
}

func (m *NeurocapsuleResponse) validateNeurocapsule() error {

	if err := validate.Required("neurocapsule", "", m.Neurocapsule); err != nil {
		return err
	}

	if m.Neurocapsule != nil {

		if err := m.Neurocapsule.Validate(); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neurocapsule")
			}
			return err
		}
	}

	return nil
}

// NeurocapsuleResponseNeurocapsule neurocapsule response neurocapsule
// swagger:model NeurocapsuleResponseNeurocapsule
// easyjson:json
type NeurocapsuleResponseNeurocapsule struct {

	// bottom
	// Required: true
	Bottom *NeurocapsuleResponseNeurocapsuleBottom `json:"bottom"`

	// top1
	// Required: true
	Top1 *NeurocapsuleResponseNeurocapsuleTop1 `json:"top1"`

	// top2
	// Required: true
	Top2 *NeurocapsuleResponseNeurocapsuleTop2 `json:"top2"`
}

// Validate validates this neurocapsule response neurocapsule
func (m *NeurocapsuleResponseNeurocapsule) Validate() error {
	var res []error

	if err := m.validateBottom(); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTop1(); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTop2(); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		msgs := []string{}
		for _, err := range res {
			msgs = append(msgs, err.Error())
		}
		return fmt.Errorf("validation failure list: " + strings.Join(msgs, "; "))
	}
	return nil
}

func (m *NeurocapsuleResponseNeurocapsule) validateBottom() error {

	if err := validate.Required("neurocapsule"+"."+"bottom", "", m.Bottom); err != nil {
		return err
	}

	if m.Bottom != nil {

		if err := m.Bottom.Validate(); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neurocapsule" + "." + "bottom")
			}
			return err
		}
	}

	return nil
}

func (m *NeurocapsuleResponseNeurocapsule) validateTop1() error {

	if err := validate.Required("neurocapsule"+"."+"top1", "", m.Top1); err != nil {
		return err
	}

	if m.Top1 != nil {

		if err := m.Top1.Validate(); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neurocapsule" + "." + "top1")
			}
			return err
		}
	}

	return nil
}

func (m *NeurocapsuleResponseNeurocapsule) validateTop2() error {

	if err := validate.Required("neurocapsule"+"."+"top2", "", m.Top2); err != nil {
		return err
	}

	if m.Top2 != nil {

		if err := m.Top2.Validate(); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neurocapsule" + "." + "top2")
			}
			return err
		}
	}

	return nil
}

// NeurocapsuleResponseNeurocapsuleBottom neurocapsule response neurocapsule bottom
// swagger:model NeurocapsuleResponseNeurocapsuleBottom
// easyjson:json
type NeurocapsuleResponseNeurocapsuleBottom struct {

	// jeans
	// Required: true
	Jeans *Product `json:"jeans"`

	// sweatpants
	// Required: true
	Sweatpants *Product `json:"sweatpants"`

	// trousers
	// Required: true
	Trousers *Product `json:"trousers"`
}

// Validate validates this neurocapsule response neurocapsule bottom
func (m *NeurocapsuleResponseNeurocapsuleBottom) Validate() error {
	var res []error

	if err := m.validateJeans(); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSweatpants(); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTrousers(); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		msgs := []string{}
		for _, err := range res {
			msgs = append(msgs, err.Error())
		}
		return fmt.Errorf("validation failure list: " + strings.Join(msgs, "; "))
	}
	return nil
}

func (m *NeurocapsuleResponseNeurocapsuleBottom) validateJeans() error {

	if err := validate.Required("neurocapsule"+"."+"bottom"+"."+"jeans", "", m.Jeans); err != nil {
		return err
	}

	if m.Jeans != nil {

		if err := m.Jeans.Validate(); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neurocapsule" + "." + "bottom" + "." + "jeans")
			}
			return err
		}
	}

	return nil
}

func (m *NeurocapsuleResponseNeurocapsuleBottom) validateSweatpants() error {

	if err := validate.Required("neurocapsule"+"."+"bottom"+"."+"sweatpants", "", m.Sweatpants); err != nil {
		return err
	}

	if m.Sweatpants != nil {

		if err := m.Sweatpants.Validate(); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neurocapsule" + "." + "bottom" + "." + "sweatpants")
			}
			return err
		}
	}

	return nil
}

func (m *NeurocapsuleResponseNeurocapsuleBottom) validateTrousers() error {

	if err := validate.Required("neurocapsule"+"."+"bottom"+"."+"trousers", "", m.Trousers); err != nil {
		return err
	}

	if m.Trousers != nil {

		if err := m.Trousers.Validate(); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neurocapsule" + "." + "bottom" + "." + "trousers")
			}
			return err
		}
	}

	return nil
}

// NeurocapsuleResponseNeurocapsuleTop1 neurocapsule response neurocapsule top1
// swagger:model NeurocapsuleResponseNeurocapsuleTop1
// easyjson:json
type NeurocapsuleResponseNeurocapsuleTop1 struct {

	// shirt1
	// Required: true
	Shirt1 *Product `json:"shirt1"`

	// shirt2
	// Required: true
	Shirt2 *Product `json:"shirt2"`

	// t shirt1
	// Required: true
	TShirt1 *Product `json:"tShirt1"`

	// t shirt2
	// Required: true
	TShirt2 *Product `json:"tShirt2"`
}

// Validate validates this neurocapsule response neurocapsule top1
func (m *NeurocapsuleResponseNeurocapsuleTop1) Validate() error {
	var res []error

	if err := m.validateShirt1(); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateShirt2(); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTShirt1(); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTShirt2(); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		msgs := []string{}
		for _, err := range res {
			msgs = append(msgs, err.Error())
		}
		return fmt.Errorf("validation failure list: " + strings.Join(msgs, "; "))
	}
	return nil
}

func (m *NeurocapsuleResponseNeurocapsuleTop1) validateShirt1() error {

	if err := validate.Required("neurocapsule"+"."+"top1"+"."+"shirt1", "", m.Shirt1); err != nil {
		return err
	}

	if m.Shirt1 != nil {

		if err := m.Shirt1.Validate(); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neurocapsule" + "." + "top1" + "." + "shirt1")
			}
			return err
		}
	}

	return nil
}

func (m *NeurocapsuleResponseNeurocapsuleTop1) validateShirt2() error {

	if err := validate.Required("neurocapsule"+"."+"top1"+"."+"shirt2", "", m.Shirt2); err != nil {
		return err
	}

	if m.Shirt2 != nil {

		if err := m.Shirt2.Validate(); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neurocapsule" + "." + "top1" + "." + "shirt2")
			}
			return err
		}
	}

	return nil
}

func (m *NeurocapsuleResponseNeurocapsuleTop1) validateTShirt1() error {

	if err := validate.Required("neurocapsule"+"."+"top1"+"."+"tShirt1", "", m.TShirt1); err != nil {
		return err
	}

	if m.TShirt1 != nil {

		if err := m.TShirt1.Validate(); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neurocapsule" + "." + "top1" + "." + "tShirt1")
			}
			return err
		}
	}

	return nil
}

func (m *NeurocapsuleResponseNeurocapsuleTop1) validateTShirt2() error {

	if err := validate.Required("neurocapsule"+"."+"top1"+"."+"tShirt2", "", m.TShirt2); err != nil {
		return err
	}

	if m.TShirt2 != nil {

		if err := m.TShirt2.Validate(); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neurocapsule" + "." + "top1" + "." + "tShirt2")
			}
			return err
		}
	}

	return nil
}

// NeurocapsuleResponseNeurocapsuleTop2 neurocapsule response neurocapsule top2
// swagger:model NeurocapsuleResponseNeurocapsuleTop2
// easyjson:json
type NeurocapsuleResponseNeurocapsuleTop2 struct {

	// blazer
	// Required: true
	Blazer *Product `json:"blazer"`

	// hoodie
	// Required: true
	Hoodie *Product `json:"hoodie"`

	// sweater
	// Required: true
	Sweater *Product `json:"sweater"`
}

// Validate validates this neurocapsule response neurocapsule top2
func (m *NeurocapsuleResponseNeurocapsuleTop2) Validate() error {
	var res []error

	if err := m.validateBlazer(); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHoodie(); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSweater(); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		msgs := []string{}
		for _, err := range res {
			msgs = append(msgs, err.Error())
		}
		return fmt.Errorf("validation failure list: " + strings.Join(msgs, "; "))
	}
	return nil
}

func (m *NeurocapsuleResponseNeurocapsuleTop2) validateBlazer() error {

	if err := validate.Required("neurocapsule"+"."+"top2"+"."+"blazer", "", m.Blazer); err != nil {
		return err
	}

	if m.Blazer != nil {

		if err := m.Blazer.Validate(); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neurocapsule" + "." + "top2" + "." + "blazer")
			}
			return err
		}
	}

	return nil
}

func (m *NeurocapsuleResponseNeurocapsuleTop2) validateHoodie() error {

	if err := validate.Required("neurocapsule"+"."+"top2"+"."+"hoodie", "", m.Hoodie); err != nil {
		return err
	}

	if m.Hoodie != nil {

		if err := m.Hoodie.Validate(); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neurocapsule" + "." + "top2" + "." + "hoodie")
			}
			return err
		}
	}

	return nil
}

func (m *NeurocapsuleResponseNeurocapsuleTop2) validateSweater() error {

	if err := validate.Required("neurocapsule"+"."+"top2"+"."+"sweater", "", m.Sweater); err != nil {
		return err
	}

	if m.Sweater != nil {

		if err := m.Sweater.Validate(); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("neurocapsule" + "." + "top2" + "." + "sweater")
			}
			return err
		}
	}

	return nil
}
