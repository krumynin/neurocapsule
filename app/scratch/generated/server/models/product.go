package models

// This file was generated by the gogi.
// Editing this file might prove futile when you re-run the gogi generate command

import (
	"fmt"
	"strings"

	"github.com/go-openapi/validate"
)

// This file was generated by the gogi tool.
// Editing this file might prove futile when you re-run the swagger generate command

// Product product
// swagger:model Product

// easyjson:json
type Product struct {

	// color
	// Required: true
	Color string `json:"color"`

	// full sku
	FullSku string `json:"full_sku,omitempty"`

	// gallery
	// Required: true
	Gallery string `json:"gallery"`

	// name
	// Required: true
	Name string `json:"name"`

	// price amount
	// Required: true
	PriceAmount int64 `json:"price_amount"`

	// sku
	// Required: true
	Sku string `json:"sku"`

	// thumbnail
	// Required: true
	Thumbnail string `json:"thumbnail"`
}

// Validate validates this product
func (m *Product) Validate() error {
	var res []error

	if err := m.validateColor(); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGallery(); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePriceAmount(); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSku(); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateThumbnail(); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		msgs := []string{}
		for _, err := range res {
			msgs = append(msgs, err.Error())
		}
		return fmt.Errorf("validation failure list: " + strings.Join(msgs, "; "))
	}
	return nil
}

func (m *Product) validateColor() error {

	if err := validate.RequiredString("color", "", string(m.Color)); err != nil {
		return err
	}

	return nil
}

func (m *Product) validateGallery() error {

	if err := validate.RequiredString("gallery", "", string(m.Gallery)); err != nil {
		return err
	}

	return nil
}

func (m *Product) validateName() error {

	if err := validate.RequiredString("name", "", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *Product) validatePriceAmount() error {

	if err := validate.Required("price_amount", "", int64(m.PriceAmount)); err != nil {
		return err
	}

	return nil
}

func (m *Product) validateSku() error {

	if err := validate.RequiredString("sku", "", string(m.Sku)); err != nil {
		return err
	}

	return nil
}

func (m *Product) validateThumbnail() error {

	if err := validate.RequiredString("thumbnail", "", string(m.Thumbnail)); err != nil {
		return err
	}

	return nil
}
