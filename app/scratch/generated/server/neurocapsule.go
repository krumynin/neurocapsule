package server

// This file was generated by the gogi.
// Editing this file might prove futile when you re-run the gogi generate command

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"strings"

	"stash.lamoda.ru/gotools/rpc/proto/jsonrpc2"
	"stash.lamoda.ru/gotools/rpc/server"

	"go.uber.org/zap"
)

const (
	HTTP_API_PREFIX = "/jsonrpc/v1/"
)

var disableLoggingIncomingRequests = os.Getenv("DISABLE_LOGGING_INCOMING_REQUESTS") == "true"
var enableLoggingIncomingRequestBody = os.Getenv("DISABLE_LOGGING_INCOMING_REQUEST_BODY") != "true"

type Server struct {
	*server.Server
	cutSensitiveDataFromHeaders func(http.Header)
	cutSensitiveDataFromBody    func([]byte) []byte
}

func New(ver, logIndex string) *Server {

	codec := jsonrpc2.NewCodec()
	codec.SetPathPrefix(HTTP_API_PREFIX)

	return NewWithConfig(server.Config{
		Codec:    codec,
		Version:  ver,
		LogIndex: logIndex,
	})
}

func NewWithConfig(config server.Config) *Server {
	rpc := server.NewServer(config)

	srv := &Server{
		Server:                      rpc,
		cutSensitiveDataFromHeaders: func(h http.Header) { h.Del("Authorization") },
		cutSensitiveDataFromBody:    func(b []byte) []byte { return b },
	}

	srv.AddOnPanic(func(ctx context.Context, err interface{}) {
		if md := server.GetMetadataFromContext(ctx); md != nil && md.Logger != nil {
			md.Logger.DPanic("Rpc server panicked", zap.Any("error", err), zap.Stack("stacktrace"), zap.String("trace_id", md.TraceId))
		} else {
			srv.Log.DPanic("Rpc server panicked", zap.Any("error", err), zap.Stack("stacktrace"), zap.String("trace_id", md.TraceId))
		}
	})

	if !disableLoggingIncomingRequests {
		srv.AddOnRequest(func(ctx context.Context, r *http.Request) {
			if r == nil {
				return
			}

			traceid := "empty"
			if xTraceID := r.Header.Get("X-Trace-Id"); xTraceID != "" {
				traceid = xTraceID
			}

			remoteAddr := r.RemoteAddr
			if chunks := strings.Split(remoteAddr, ":"); len(chunks) > 1 {
				remoteAddr = chunks[0]
			}

			logger := srv.Log

			if enableLoggingIncomingRequestBody {
				body, _ := ioutil.ReadAll(r.Body)
				r.Body.Close()
				bodyReadCloser := ioutil.NopCloser(bytes.NewBuffer(body))
				r.Body = bodyReadCloser

				logger = logger.With(zap.String("body", string(srv.cutSensitiveDataFromBody(body))))
			}

			httpHeaders := r.Header.Clone()
			srv.cutSensitiveDataFromHeaders(httpHeaders)

			logger.Info("Incoming request",
				zap.String("uri", r.RequestURI),
				zap.String("host", r.Host),
				zap.String("trace_id", traceid),
				zap.String("http_method", r.Method),
				zap.String("headers", headersToString(httpHeaders)),
				zap.String("remote_addr", remoteAddr),
			)
		})
	}

	return srv
}

func (srv *Server) Run() {
	srv.Server.Run(server.RunConfig{
		SwaggerSpec: SwaggerJSON,
		HttpPrefix:  HTTP_API_PREFIX,
	})
}

func (srv *Server) SetCutSensitiveDataFromBody(f func([]byte) []byte) {
	srv.cutSensitiveDataFromBody = func(body []byte) []byte {
		defer func() {
			if r := recover(); r != nil {
				srv.Log.Warn("cut sensetive data from body panicked", zap.Any("panic", r))
			}
		}()

		return f(body)
	}
}

func (srv *Server) SetCutSensitiveDataFromHeaders(f func(http.Header)) {
	srv.cutSensitiveDataFromHeaders = func(headers http.Header) {
		defer func() {
			if r := recover(); r != nil {
				srv.Log.Warn("cut sensetive data from headers panicked", zap.Any("panic", r))
			}
		}()

		f(headers)
	}
}

func headersToString(headers http.Header) string {
	ret := &bytes.Buffer{}
	for k, v := range headers {
		ret.WriteString(fmt.Sprintf("%s:%s,", k, v))
	}

	return ret.String()
}
